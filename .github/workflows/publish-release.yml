name: Publish release

on:
  workflow_dispatch:

jobs:
  publish-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Set version env variable
        run: echo VERSION=$((grep -w "version" | cut -d= -f2) < gradle.properties | cut -d- -f1) >> $GITHUB_ENV
      - name: Pre release depenency version update
        env:
          GITHUB_TOKEN: ${{ secrets.BALLERINA_BOT_TOKEN }}
        run: |
          echo "Version: ${VERSION}"
          git config user.name ${{ secrets.BALLERINA_BOT_USERNAME }}
          git config user.email ${{ secrets.BALLERINA_BOT_EMAIL }}
          git checkout -b release-${VERSION}
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Publish artifact
        env:
          GITHUB_TOKEN: ${{ secrets.BALLERINA_BOT_TOKEN }}
          packageUser: ${{ secrets.BALLERINA_BOT_USERNAME }}
          packagePAT: ${{ secrets.BALLERINA_BOT_TOKEN }}
        run: |
          ./gradlew release -Prelease.useAutomaticVersion=true
      - name: Create Github release from the release tag
        run: |
          curl --request POST 'https://api.github.com/repos/ballerina-platform/ballerina-update-tool/releases' \
          --header 'Accept: application/vnd.github.v3+json' \
          --header 'Authorization: Bearer ${{ secrets.BALLERINA_BOT_TOKEN }}' \
          --header 'Content-Type: application/json' \
          --data-raw '{
              "tag_name": "v'"$VERSION"'",
              "name": "ballerina-update-tool-v'"$VERSION"'"
          }'
  create_release:
    needs: publish-release
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.BALLERINA_BOT_TOKEN }}
        with:
          tag_name: ${{ needs.get_release_version.outputs.version }}
          release_name: ${{ needs.get_release_version.outputs.version }}
          draft: false
          prerelease: false
      - name: Upload zip artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.BALLERINA_BOT_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_name: ballerina-jre-windows-${{ needs.get_release_version.outputs.version }}.zip
          asset_path: build/distributions/ballerina-command-${{ needs.get_release_version.outputs.version }}.zip
          asset_content_type: application/octet-stream
      - name: Upload Linux zip artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.BALLERINA_BOT_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_name: ballerina-jre-windows-${{ needs.get_release_version.outputs.version }}.zip
          asset_path: build/distributions/ballerina-command-linux-${{ needs.get_release_version.outputs.version }}.zip
          asset_content_type: application/octet-stream
      - name: Upload MacOS zip artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.BALLERINA_BOT_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_name: ballerina-jre-windows-${{ needs.get_release_version.outputs.version }}.zip
          asset_path: build/distributions/ballerina-command-macos-${{ needs.get_release_version.outputs.version }}.zip
          asset_content_type: application/octet-stream
      - name: Upload Windows zip artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.BALLERINA_BOT_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_name: ballerina-jre-windows-${{ needs.get_release_version.outputs.version }}.zip
          asset_path: build/distributions/ballerina-command-windows-${{ needs.get_release_version.outputs.version }}.zip
          asset_content_type: application/octet-stream
      - name: Post release PR
        env:
          GITHUB_TOKEN: ${{ secrets.BALLERINA_BOT_TOKEN }}
        run: |
          curl -fsSL https://github.com/github/hub/raw/master/script/get | bash -s 2.14.1
          bin/hub pull-request --base main -m "[Automated] Sync master after "$VERSION" release"
